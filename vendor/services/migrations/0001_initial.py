# Generated by Django 2.2.5 on 2019-10-03 05:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_vendor', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(code='nomatch', message='Enter 10 digit mobile number without any prefix(+91 or 0)', regex='^[9876]\\d{9}$')])),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('N', 'Not to Say')], max_length=1)),
                ('pincode', models.CharField(blank=True, max_length=6)),
                ('address', models.CharField(blank=True, max_length=124)),
                ('city', models.CharField(blank=True, max_length=124)),
                ('state', models.CharField(blank=True, max_length=124)),
                ('image', models.ImageField(blank=True, null=True, upload_to='VendorFinder/static/upload')),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
                ('row_update_date', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'user',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('service_name', models.CharField(max_length=124)),
                ('service_charge', models.DecimalField(decimal_places=2, max_digits=10)),
                ('service_image', models.ImageField(blank=True, null=True, upload_to='VendorFinder/static/upload')),
                ('service_description', models.CharField(blank=True, max_length=124)),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
                ('row_update_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'service',
                'db_table': 'service',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('status_name', models.CharField(max_length=124)),
                ('description', models.TextField()),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'status',
                'db_table': 'status',
            },
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('sub_service_name', models.CharField(max_length=124)),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
                ('row_update_date', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Service')),
            ],
            options={
                'verbose_name_plural': 'sub service',
                'db_table': 'sub_service',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('sex', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('N', 'Not to Say')], max_length=1)),
            ],
            options={
                'verbose_name_plural': 'admin',
                'db_table': 'admin',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('service_taken', models.PositiveSmallIntegerField()),
            ],
            options={
                'verbose_name_plural': 'customer',
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='Otp',
            fields=[
                ('otp_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('generation_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'otp',
                'db_table': 'otp',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('customer_served', models.PositiveSmallIntegerField()),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name_plural': 'vendor',
                'db_table': 'vendor',
            },
        ),
        migrations.CreateModel(
            name='VendorService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('sub_service_charge', models.DecimalField(decimal_places=2, max_digits=10)),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
                ('row_update_date', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Service')),
                ('sub_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.SubService')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Vendor')),
            ],
            options={
                'verbose_name_plural': 'vendor service',
                'db_table': 'vendor_service',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_charge', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
                ('row_insert_date', models.DateTimeField(auto_now_add=True)),
                ('row_update_date', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Service')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.Status')),
                ('sub_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.SubService')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Customer')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Vendor')),
            ],
            options={
                'verbose_name_plural': 'invoice',
                'db_table': 'invoice',
            },
        ),
    ]
